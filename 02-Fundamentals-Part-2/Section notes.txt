"use strict";

//Arrow function. It is a short form of function expression.
const calcAge=birthYear=>2037-birthYear; //birthYear here is the parameter.
const age=calcAge(1991);
console.log(age);

const yearsUntilRetirement =(birthYear,firstName)=>{
    const age =2024 - birthYear;
    const retirement=65-age;
    // return retirement;
    return `${firstName} retires in ${retirement} years`;
}

console.log(yearsUntilRetirement(1991, `Ramji`));
console.log(yearsUntilRetirement(1963, `Kumar`));

in the above code.... how without variable declaration...the arguments birthYear, firstName are not showing any errors about variable declaration.
------------------------------------
In JavaScript, when you define parameters for a function, such as `birthYear` and `firstName` in your example, you are not required to explicitly declare them as variables within the function body. This is because function parameters are automatically treated as variables within the scope of the function.

When you call a function and pass arguments to it, like `yearsUntilRetirement(1991, 'Ramji')`, JavaScript automatically assigns these values to the corresponding parameters (`birthYear` and `firstName`) within the function's scope.

Here's why you're not seeing any errors related to variable declaration:

1. **Function Parameters**: `birthYear` and `firstName` are parameters of the `yearsUntilRetirement` function. When you call this function with arguments, JavaScript automatically assigns these arguments to the parameters, treating them as variables within the function's scope.

2. **Scope**: Parameters of a function are scoped within the function body. This means they are accessible within the function but not outside of it. JavaScript handles the scoping of function parameters internally, so you don't need to explicitly declare them as variables.

3. **Strict Mode**: Even when `"use strict";` is used, function parameters are exempt from strict mode's variable declaration requirements. In strict mode, you must explicitly declare variables using `var`, `let`, or `const`, but function parameters are treated differently and don't require explicit declaration.

Therefore, in your code, `birthYear` and `firstName` are treated as variables within the function `yearsUntilRetirement`, and you don't need to declare them explicitly. This behavior is part of JavaScript's language specification and is consistent across different JavaScript environments.

=======================================================================================================================================================
just tell me when return is need and when return is not needed in arrow function expression
------------------
In arrow functions, the use of the `return` keyword depends on whether the function body consists of a single expression or multiple statements:

1. **Return not needed (implicit return)**:
   - If the function body consists of a single expression, the `return` keyword is not needed. The result of the expression is automatically returned.
   - Example:
     ```javascript
     const double = x => x * 2;
     ```
   - Here, `x * 2` is a single expression. The result of this expression (the doubled value of `x`) is automatically returned without explicitly using `return`.

2. **Return needed (explicit return)**:
   - If the function body contains multiple statements or requires more complex logic, you need to use the `return` keyword explicitly.
   - Example:
     ```javascript
     const sum = (a, b) => {
       const result = a + b;
       return result;
     };
     ```
   - Here, the function body contains multiple statements (`const result = a + b;` and `return result;`). To return the value of `result`, the `return` keyword is used explicitly.

In summary, if the arrow function has a concise body consisting of a single expression, you can omit the `return` keyword, as the result of the expression will be implicitly returned. However, if the function body requires multiple statements or more complex logic, you need to use `return` explicitly to return a value.