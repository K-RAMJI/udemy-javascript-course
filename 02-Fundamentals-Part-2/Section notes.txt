"use strict";

//Arrow function. It is a short form of function expression.
const calcAge=birthYear=>2037-birthYear; //birthYear here is the parameter.
const age=calcAge(1991);
console.log(age);

const yearsUntilRetirement =(birthYear,firstName)=>{
    const age =2024 - birthYear;
    const retirement=65-age;
    // return retirement;
    return `${firstName} retires in ${retirement} years`;
}

console.log(yearsUntilRetirement(1991, `Ramji`));
console.log(yearsUntilRetirement(1963, `Kumar`));

in the above code.... how without variable declaration...the arguments birthYear, firstName are not showing any errors about variable declaration.
------------------------------------
In JavaScript, when you define parameters for a function, such as `birthYear` and `firstName` in your example, you are not required to explicitly declare them as variables within the function body. This is because function parameters are automatically treated as variables within the scope of the function.

When you call a function and pass arguments to it, like `yearsUntilRetirement(1991, 'Ramji')`, JavaScript automatically assigns these values to the corresponding parameters (`birthYear` and `firstName`) within the function's scope.

Here's why you're not seeing any errors related to variable declaration:

1. **Function Parameters**: `birthYear` and `firstName` are parameters of the `yearsUntilRetirement` function. When you call this function with arguments, JavaScript automatically assigns these arguments to the parameters, treating them as variables within the function's scope.

2. **Scope**: Parameters of a function are scoped within the function body. This means they are accessible within the function but not outside of it. JavaScript handles the scoping of function parameters internally, so you don't need to explicitly declare them as variables.

3. **Strict Mode**: Even when `"use strict";` is used, function parameters are exempt from strict mode's variable declaration requirements. In strict mode, you must explicitly declare variables using `var`, `let`, or `const`, but function parameters are treated differently and don't require explicit declaration.

Therefore, in your code, `birthYear` and `firstName` are treated as variables within the function `yearsUntilRetirement`, and you don't need to declare them explicitly. This behavior is part of JavaScript's language specification and is consistent across different JavaScript environments.

=======================================================================================================================================================
just tell me when return is need and when return is not needed in arrow function expression
------------------
In arrow functions, the use of the `return` keyword depends on whether the function body consists of a single expression or multiple statements:

1. **Return not needed (implicit return)**:
   - If the function body consists of a single expression, the `return` keyword is not needed. The result of the expression is automatically returned.
   - Example:
     ```javascript
     const double = x => x * 2;
     ```
   - Here, `x * 2` is a single expression. The result of this expression (the doubled value of `x`) is automatically returned without explicitly using `return`.

2. **Return needed (explicit return)**:
   - If the function body contains multiple statements or requires more complex logic, you need to use the `return` keyword explicitly.
   - Example:
     ```javascript
     const sum = (a, b) => {
       const result = a + b;
       return result;
     };
     ```
   - Here, the function body contains multiple statements (`const result = a + b;` and `return result;`). To return the value of `result`, the `return` keyword is used explicitly.

In summary, if the arrow function has a concise body consisting of a single expression, you can omit the `return` keyword, as the result of the expression will be implicitly returned. However, if the function body requires multiple statements or more complex logic, you need to use `return` explicitly to return a value.

=======================================================================================================================================================

The array constructor syntax, which uses the `Array` constructor and the `new` keyword, provides a way to create arrays dynamically, particularly when you need to create an array with a predefined length or when the elements are not known at the time of creation. Here's how it differs from the array literal syntax:

1. **Specifying Array Length**: With the array constructor syntax, you can specify the length of the array by passing a single numeric argument to the `Array` constructor. For example:
    ```javascript
    const emptyArray = new Array(5); // Creates an array with length 5, but all elements are initially empty
    ```

    In this case, `emptyArray` is an array with a length of 5, but all its elements are initially empty (i.e., they contain `undefined`). This can be useful when you know the size of the array you need but don't have the actual elements yet.

2. **Array Elements**: When using the array constructor syntax, you can pass multiple arguments to the `Array` constructor to initialize the array with specific elements. For example:
    ```javascript
    const years = new Array(1991, 1994, 2008, 2020);
    ```

    This creates an array `years` with the specified elements: 1991, 1994, 2008, and 2020.

3. **Performance**: Using the array literal syntax is generally considered more efficient in terms of performance compared to the array constructor syntax. This is because the array literal syntax directly creates the array object without invoking the `Array` constructor function.

In summary, while both methods create arrays, the array constructor syntax provides more flexibility in specifying array length and initializing elements dynamically, whereas the array literal syntax is more concise and commonly used for its simplicity.


=======================================================================================================================================================

**Explanation:**

In JavaScript, when we declare a variable using `const`, it implies that the variable cannot be reassigned to a different value. However, this rule behaves differently when it comes to arrays and objects compared to primitive values like numbers and strings.

**Example 1:**

```javascript
const name = "John";
name = "Doe"; // This will throw an error, because we are trying to change the value of a const variable.
```

In the above example, trying to change the value of `name` from "John" to "Doe" will result in an error because `name` is declared using `const`.

**Example 2:**

```javascript
const numbers = [1, 2, 3];
numbers.push(4); // This will work, as we are modifying the array, not reassigning it.
console.log(numbers); // Output: [1, 2, 3, 4]
```

However, when we declare an array with `const`, it means we can't assign a completely new array to that variable, but we can still modify the existing array, such as adding or removing elements from it.

**Explanation of the Concept:**

The reason behind this behavior lies in how JavaScript stores variables in memory. When we declare a primitive variable like a number or a string with `const`, the value itself is directly stored in memory, and that value cannot be changed. However, when we declare an array or an object with `const`, what actually gets stored in memory is a reference to the array or object, not the array or object itself. So, while we can't change the reference stored in the variable, we can still modify the contents of the array or object that the reference points to.

**Example 3:**

```javascript
const person = { name: "John", age: 30 };
person.age = 40; // This will work, as we are modifying the object, not reassigning it.
console.log(person); // Output: { name: "John", age: 40 }
```

Similarly, with objects, we can modify their properties even if declared with `const`.

**Summary:**

- `const` ensures that the variable itself cannot be reassigned to a different value.
- For arrays and objects declared with `const`, we can still modify their contents (add, remove, or change elements), but we cannot assign a completely new array or object to that variable.
- This behavior stems from how JavaScript handles memory references for arrays and objects.